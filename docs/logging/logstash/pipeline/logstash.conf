input {
  # HTTP input for receiving logs from services
  http {
    port => 5000
    codec => json
    type => "http"
  }

  # TCP input for syslog-style logs
  tcp {
    port => 5001
    codec => json_lines
    type => "tcp"
  }
}

filter {
  # Parse timestamp if present
  if [timestamp] {
    date {
      match => ["timestamp", "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd HH:mm:ss"]
      target => "@timestamp"
    }
  }

  # Add environment field if not present
  if ![environment] {
    mutate {
      add_field => { "environment" => "${ENVIRONMENT:development}" }
    }
  }

  # Parse user agent if present
  if [userAgent] {
    useragent {
      source => "userAgent"
      target => "user_agent"
    }
  }

  # Extract service from message if not explicitly set
  if ![service] {
    if [message] =~ /\[api\]/ {
      mutate {
        add_field => { "service" => "api" }
      }
    } else if [message] =~ /\[frontend\]/ {
      mutate {
        add_field => { "service" => "frontend" }
      }
    }
  }

  # Add location data for geo queries if IP is present
  if [ip] {
    geoip {
      source => "ip"
      target => "geo"
    }
  }

  # Convert log level to lowercase for consistency
  if [level] {
    mutate {
      lowercase => ["level"]
    }
  }

  # Parse error stack traces for better analysis
  if [stack] {
    mutate {
      gsub => ["stack", "\n", " | "]
    }
  }

  # Add tags based on log level
  if [level] == "error" {
    mutate {
      add_tag => ["error"]
    }
  } else if [level] == "warn" {
    mutate {
      add_tag => ["warning"]
    }
  }

  # Add correlation tag if requestId or correlationId exists
  if [requestId] or [correlationId] {
    mutate {
      add_tag => ["correlated"]
    }
  }

  # Parse duration as number for aggregations
  if [duration] {
    mutate {
      convert => { "duration" => "integer" }
    }
  }

  # Parse status code as integer
  if [statusCode] {
    mutate {
      convert => { "statusCode" => "integer" }
    }
  }

  # Add tags for HTTP status code ranges
  if [statusCode] {
    if [statusCode] >= 500 {
      mutate {
        add_tag => ["http_5xx", "server_error"]
      }
    } else if [statusCode] >= 400 {
      mutate {
        add_tag => ["http_4xx", "client_error"]
      }
    } else if [statusCode] >= 300 {
      mutate {
        add_tag => ["http_3xx", "redirect"]
      }
    } else if [statusCode] >= 200 {
      mutate {
        add_tag => ["http_2xx", "success"]
      }
    }
  }

  # Remove sensitive fields (add more as needed)
  mutate {
    remove_field => ["password", "token", "apiKey", "secret"]
  }
}

output {
  # Output to Elasticsearch with date-based indices
  elasticsearch {
    hosts => ["${ELASTICSEARCH_HOST:elasticsearch:9200}"]
    index => "nba-stats-%{[service]:app}-%{+YYYY.MM.dd}"
    document_type => "_doc"
  }

  # Optional: Output to console for debugging
  # stdout {
  #   codec => rubydebug
  # }
}
